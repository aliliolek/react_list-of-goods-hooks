{"version":3,"sources":["App.tsx","components/GoodsList/GoodsList.tsx","index.tsx"],"names":["SortType","GoodsList","visibleGoods","map","good","goodsFromServer","App","useState","None","sortParameter","setSortParameter","reverseParemeter","setReverseParemeter","makeResetVisible","sortAlphClassName","classNames","Alphabetically","sortLengthClassName","Length","reverseClassName","handleSort","sortBy","goods","reverse","sortedGoods","sort","a","b","localeCompare","length","sortGoods","className","type","onClick","prevReverseParemeter","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0ECbQC,EAAsC,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAH,OACjD,6BACGA,EAAaC,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,SDHjBC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGL,K,gCAAAA,E,gBAAAA,E,SAAAA,M,KAML,IAyBaM,EAAgB,WAC3B,IAAIJ,EAAY,UAAOG,GACvB,EAA0CE,mBAAmBP,EAASQ,MAAtE,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAgDH,oBAAS,GAAzD,mBAAOI,EAAP,KAAyBC,EAAzB,KACMC,EAAqC,KAAlBJ,GAAwBE,EAE3CG,EAAoBC,IAAW,SAAU,UAC7C,CAAE,WAAYN,IAAkBT,EAASgB,iBACrCC,EAAsBF,IAAW,SAAU,aAC/C,CAAE,WAAYN,IAAkBT,EAASkB,SACrCC,EAAmBJ,IAAW,SAAU,aAC5C,CAAE,YAAaJ,IAEXS,EAAa,SAACC,GAClBX,EAAiBW,IAUnB,OAFAnB,EA/CgB,SAChBoB,EACAD,EACAE,GAEA,IAAIC,EAAW,YAAOF,GAEtB,OAAQD,GACN,KAAKrB,EAASgB,eACZQ,EAAcA,EAAYC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,MACzD,MACF,KAAK3B,EAASkB,OACZM,EAAcA,EAAYC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEG,OAASF,EAAEE,UAU1D,OAJIN,IACFC,EAAcA,EAAYD,WAGrBC,EAyBQM,CAAU5B,EAAcO,EAAeE,GAGpD,sBAAKoB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWjB,EACXmB,QAAS,WACPb,EAAWpB,EAASgB,iBAJxB,iCAUA,wBACEgB,KAAK,SACLD,UAAWd,EACXgB,QAAS,WACPb,EAAWpB,EAASkB,SAJxB,4BAUA,wBACEc,KAAK,SACLD,UAAWZ,EACXc,QAAS,WACPrB,GAAoB,SAAAsB,GAAoB,OAAKA,MAJjD,qBAUCrB,GACC,wBACEmB,KAAK,SACLD,UAAU,4BACVE,QAAS,WA3CjBvB,EAAiBV,EAASQ,MAC1BI,GAAoB,IAuCd,sBAaJ,6BACE,cAAC,EAAD,CAAWV,aAAcA,UEvHjCiC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.f36df75e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\nimport { GoodsList } from './components/GoodsList';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  Alphabetically = 'alphabetically',\n  Length = 'length',\n  None = '',\n}\n\nconst sortGoods = (\n  goods: string[],\n  sortBy: SortType,\n  reverse: boolean,\n) => {\n  let sortedGoods = [...goods];\n\n  switch (sortBy) {\n    case SortType.Alphabetically:\n      sortedGoods = sortedGoods.sort((a, b) => a.localeCompare(b));\n      break;\n    case SortType.Length:\n      sortedGoods = sortedGoods.sort((a, b) => a.length - b.length);\n      break;\n    default:\n      break;\n  }\n\n  if (reverse) {\n    sortedGoods = sortedGoods.reverse();\n  }\n\n  return sortedGoods;\n};\n\nexport const App: React.FC = () => {\n  let visibleGoods = [...goodsFromServer];\n  const [sortParameter, setSortParameter] = useState<SortType>(SortType.None);\n  const [reverseParemeter, setReverseParemeter] = useState(false);\n  const makeResetVisible = sortParameter !== '' || reverseParemeter;\n\n  const sortAlphClassName = classNames('button', 'is-info',\n    { 'is-light': sortParameter !== SortType.Alphabetically });\n  const sortLengthClassName = classNames('button', 'is-success',\n    { 'is-light': sortParameter !== SortType.Length });\n  const reverseClassName = classNames('button', 'is-warning',\n    { 'is-light': !reverseParemeter });\n\n  const handleSort = (sortBy: SortType) => {\n    setSortParameter(sortBy);\n  };\n\n  const handleReset = () => {\n    setSortParameter(SortType.None);\n    setReverseParemeter(false);\n  };\n\n  visibleGoods = sortGoods(visibleGoods, sortParameter, reverseParemeter);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={sortAlphClassName}\n          onClick={() => {\n            handleSort(SortType.Alphabetically);\n          }}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={sortLengthClassName}\n          onClick={() => {\n            handleSort(SortType.Length);\n          }}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={reverseClassName}\n          onClick={() => {\n            setReverseParemeter(prevReverseParemeter => !prevReverseParemeter);\n          }}\n        >\n          Reverse\n        </button>\n\n        {makeResetVisible && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              handleReset();\n            }}\n          >\n            Reset\n          </button>\n        )}\n\n      </div>\n\n      <ul>\n        <GoodsList visibleGoods={visibleGoods} />\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\n\ntype GoodsListProps = {\n  visibleGoods: string[],\n};\n\nexport const GoodsList: React.FC<GoodsListProps> = ({ visibleGoods }) => (\n  <ul>\n    {visibleGoods.map(good => (\n      <li data-cy=\"Good\" key={good}>{good}</li>\n    ))}\n  </ul>\n);\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}